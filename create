#!/usr/bin/env python3
import os


def generate_boilerplate(year, day):
    """
    Generates boilerplate files and directories for a new Advent of Code day.

    Args:
        year (int): The year of the Advent of Code challenge.
        day (int): The day of the Advent of Code challenge.
    """
    # Format year and day
    year_dir = f"{year}"
    day_dir = f"day{day:02d}"

    # Define paths
    base_path = os.path.join(year_dir, day_dir)
    example_input_path = os.path.join(base_path, "example.txt")
    puzzle_input_path = os.path.join(base_path, "input.txt")
    solution_path = os.path.join(base_path, "solution.py")

    # Create directories if they don't exist
    os.makedirs(base_path, exist_ok=True)

    # Create files with default boilerplate if they don't exist
    if not os.path.exists(example_input_path):
        with open(example_input_path, "w") as f:
            f.write("")  # Leave empty for user to paste input
        print(f"Created: {example_input_path}")

    if not os.path.exists(puzzle_input_path):
        with open(puzzle_input_path, "w") as f:
            f.write("")  # Leave empty for user to paste input
        print(f"Created: {puzzle_input_path}")

    if not os.path.exists(solution_path):
        with open(solution_path, "w") as f:
            f.write(f"""\"\"\"Advent of Code {year} - Day {day:02d}\"\"\"

import os


def part1(input_data: str):
    \"\"\"Solve part 1 of the puzzle.\"\"\"
    return None


def part2(input_data: str):
    \"\"\"Solve part 2 of the puzzle.\"\"\"
    return None


def read_file(filename: str):
    \"\"\"Reads in the input file.\"\"\"
    current_dir = os.path.dirname(__file__)
    file_path = os.path.join(current_dir, filename)
    with open(file_path, "r") as input_file:
        return input_file.read().strip()


def main():
    example_input = read_file("example.txt")
    puzzle_input = read_file("input.txt")

    PART1_EXAMPLE_SOLUTION = None
    PART2_EXAMPLE_SOLUTION = None

    part1_example_solution = part1(example_input)
    if part1_example_solution == PART1_EXAMPLE_SOLUTION:
        print("Part 1:", part1(puzzle_input))
    else:
        print(f"Part 1 Failed: {{part1_example_solution}} != {{PART1_EXAMPLE_SOLUTION}}")

    part2_example_solution = part2(example_input)
    if part2_example_solution == PART2_EXAMPLE_SOLUTION:
        print("Part 2:", part2(puzzle_input))
    else:
        print(f"Part 2 Failed: {{part2_example_solution}} != {{PART2_EXAMPLE_SOLUTION}}")


if __name__ == "__main__":
    main()
""")
        print(f"Created: {solution_path}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Generate Advent of Code boilerplate for a specific year and day.")
    parser.add_argument("year", type=int, help="The year of the Advent of Code challenge (e.g., 2023).")
    parser.add_argument("day", type=int, help="The day of the Advent of Code challenge (1-25).")

    args = parser.parse_args()
    generate_boilerplate(args.year, args.day)
